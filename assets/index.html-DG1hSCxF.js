import{_ as t,c as s,e as a,o as i}from"./app-CGJJd-cj.js";const o={};function r(n,e){return i(),s("div",null,e[0]||(e[0]=[a('<h2 id="训练问题" tabindex="-1"><a class="header-anchor" href="#训练问题"><span>训练问题</span></a></h2><p>训练从尝试一开始，记录了一步一步修改改进，到尝试三就基本完成复现！</p><h3 id="_1-尝试一" tabindex="-1"><a class="header-anchor" href="#_1-尝试一"><span>1 尝试一</span></a></h3><p>训练中：在 Dateset 的 <code>__getitem__</code> 函数中进行 shuffle，导致每次迭代都会 shuffle 整个数据一次，耗费大量时间</p><ul><li><p>在经过10000次迭代（20个epoch）后：</p><ul><li><p>psnr 整体是呈现一个上升的趋势，在10000次迭代后在24左右</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/image-20240430195650221.png" alt="image-20240430195650221" style="zoom:50%;"></li><li><p>loss 从一开始整体下降，之后就一直在0.1225左右徘徊（感觉出现问题）没有明显的下降趋势</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/image-20240430195519373.png" alt="image-20240430195519373" style="zoom:50%;"></li></ul></li><li><p>分别在5000次和10000次迭代的时候 evaluate 了两次：</p><ul><li>第一次：loss = 0.1201，psnr = 22.94，mse = 0.005223</li><li>第二次：loss = 0.1191，psnr = 23.8，mse = 0.004276</li></ul><p>推理得到的图像如下：</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/060.png" style="zoom:80%;"></li></ul><blockquote><p>其实在训练时获取光线时本来就是打乱了的，传入 <code>__getitem__</code> 的 <code>index</code> 就是随机的，但是发现在移除所有光线的 shuffle 后，训练出现问题（一直 <code>psnr = inf</code>，<code>loss = 0</code>），具体原因还未知、</p></blockquote><h3 id="_2-尝试二" tabindex="-1"><a class="header-anchor" href="#_2-尝试二"><span>2 尝试二</span></a></h3><p>现在我将 shuffle 放到了 <code>__init__</code> 中去，只在创建数据集时进行一次 shuffle，训练正常进行，时间相比以前有了提升！</p><p>但出过拟合问题！</p><ul><li><p>在2500次迭代（5个epoch）后：</p><ul><li><p>loss 持续下降到 0.000292，停止后再次开始训练时断崖上升</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/image-20240430203600663.png" alt="image-20240430203600663" style="zoom:50%;"></li><li><p>psnr 持续上升到40，停止后再次开始训练时断崖下降</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/image-20240430203714312.png" alt="image-20240430203714312" style="zoom:50%;"></li></ul></li><li><p>使用 run.py 的 evaluate 模块进行测试：</p><p>输出的图像与指标不符，<strong>loss = 0.055</strong>，<strong>psnr = 15.4939</strong>，<strong>mse = 0.0282</strong>；具体生成图像也是比较糟糕，只能看到大致雏形</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/image-20240430212522124.png" alt="image-20240430212522124" style="zoom:80%;"></li></ul><p>问题：</p><p>发现了问题出现在数据集的 <code>__getitem__</code> 上，每次传入的 <code>index</code> 是随机图片索引，只有只有 <code>1~200</code>，只能得到前面的 <code>1~200*1024</code> 的数据太狭隘了，导致了过拟合。</p><p>目前解决方案在 <code>index</code> 的基础上乘上图像的宽高：</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">index </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">H </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> self</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">W</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_3-尝试三" tabindex="-1"><a class="header-anchor" href="#_3-尝试三"><span>3 尝试三</span></a></h3><p>经过上述的修改，并且参考 nerf-pytorch 的代码在每隔一段时间（我现在暂时设定<code>self.N_rays * cfg.ep_iter</code> 次，即 <code>1024*500</code>）就会重新打乱一遍所有的32000000条光线</p><p>我将代码放到了阿里云的服务器上进行训练，经过<strong>10.48小时</strong>的训练，总共迭代了<strong>71,000次</strong>（142个epoch）</p><ul><li><p>训练：</p><ul><li><p>loss 持续下降，目前在0.003左右波动</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/image-20240501085109274.png" alt="image-20240501085109274" style="zoom:50%;"></li><li><p>psnr 持续上升，目前在32左右波动</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/image-20240501085258470.png" alt="image-20240501085258470" style="zoom:50%;"></li></ul></li><li><p>evaluate：我设定了每隔2500次迭代（5个epoch）就进行一次 evaluate，每次为了节省时间只用10张图片进行测试</p><p><strong>loss</strong> 持续下降到<strong>0.006</strong>，<strong>mse</strong> 持续下降到<strong>0.0018</strong>，<strong>psnr</strong> 持续上升到<strong>27.6134</strong></p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/image-20240501085755386.png" alt="image-20240501085755386" style="zoom:67%;"><p>得到的图片：</p><p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/009.png" alt="009" loading="lazy"></p><p>训练完后对整体（200张图片）进行了一次 evaluate：得到 psnr = 28.4860</p></li><li><p>与尝试一进行对比：在10000次迭代左右，时间大大减少，且loss、psnr都更加优秀</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/image-20240501090741066.png" alt="image-20240501090741066" style="zoom:50%;"></li></ul><h3 id="_4-问题" tabindex="-1"><a class="header-anchor" href="#_4-问题"><span>4 问题</span></a></h3><h4 id="_4-1-psnr-不上升" tabindex="-1"><a class="header-anchor" href="#_4-1-psnr-不上升"><span>4.1 psnr 不上升</span></a></h4><p><strong>有时</strong>开始训练时的psnr从9左右开始就会导致 psnr 不上升一直徘徊在9左右，loss 正常下降，<strong>重新开始训练就有可能回归正常！</strong></p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/image-20240430212144837.png" alt="image-20240430212144837" style="zoom:67%;"><p>尝试了5000次的迭代（10个epoch），测试出来图片如下：</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-04-30/lQLPKHHImplXjiHNAlTNBKqwQyL9R_cVfYgGGp3Cg3rNAA_1194_596.png" alt="lQLPKHHImplXjiHNAlTNBKqwQyL9R_cVfYgGGp3Cg3rNAA_1194_596" style="zoom:50%;"><p>目前原因可能是初始化导致的😭（小问题，重新开始训练就行）</p><h4 id="_4-2-加载再训练" tabindex="-1"><a class="header-anchor" href="#_4-2-加载再训练"><span>4.2 加载再训练</span></a></h4><p>当我将保存的模型加载接着训练的时候，我发现了 loss 相较于之前突然变大了再缓慢下降，psnr 也是相似的，一开始相较之前的要小再缓慢上升</p><p>应该是存储和读取模型时的问题</p>',28)]))}const g=t(o,[["render",r]]),l=JSON.parse(`{"path":"/article/jakz8gtt/","title":"NeRF学习 —— 复现训练中的问题记录","lang":"zh-CN","frontmatter":{"title":"NeRF学习 —— 复现训练中的问题记录","tags":["3DVision","NeRF","3D/4D Reconstruction"],"createTime":"2024/05/05 16:30:25","permalink":"/article/jakz8gtt/","cover":"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/009.png","description":"训练问题 训练从尝试一开始，记录了一步一步修改改进，到尝试三就基本完成复现！ 1 尝试一 训练中：在 Dateset 的 __getitem__ 函数中进行 shuffle，导致每次迭代都会 shuffle 整个数据一次，耗费大量时间 在经过10000次迭代（20个epoch）后： psnr 整体是呈现一个上升的趋势，在10000次迭代后在24左右 i...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"NeRF学习 —— 复现训练中的问题记录\\",\\"image\\":[\\"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/009.png\\"],\\"dateModified\\":\\"2025-04-29T12:57:05.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/article/jakz8gtt/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"NeRF学习 —— 复现训练中的问题记录"}],["meta",{"property":"og:description","content":"训练问题 训练从尝试一开始，记录了一步一步修改改进，到尝试三就基本完成复现！ 1 尝试一 训练中：在 Dateset 的 __getitem__ 函数中进行 shuffle，导致每次迭代都会 shuffle 整个数据一次，耗费大量时间 在经过10000次迭代（20个epoch）后： psnr 整体是呈现一个上升的趋势，在10000次迭代后在24左右 i..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/009.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T12:57:05.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:src","content":"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-05-01/009.png"}],["meta",{"name":"twitter:image:alt","content":"NeRF学习 —— 复现训练中的问题记录"}],["meta",{"property":"article:tag","content":"3D/4D Reconstruction"}],["meta",{"property":"article:tag","content":"NeRF"}],["meta",{"property":"article:tag","content":"3DVision"}],["meta",{"property":"article:modified_time","content":"2025-04-29T12:57:05.000Z"}]]},"readingTime":{"minutes":3.73,"words":1119},"git":{"updatedTime":1745931425000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":2,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"2. CV/16. NeRF_Train_Notes.md","headers":[],"categoryList":[{"id":"de90e8","sort":2,"name":" CV"}]}`);export{g as comp,l as data};
