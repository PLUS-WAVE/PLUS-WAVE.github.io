import{_ as i,c as a,e as n,o as t}from"./app-CGJJd-cj.js";const e={};function l(h,s){return t(),a("div",null,s[0]||(s[0]=[n(`<p>🌟后续的完成的项目：Windows 上基于 OpenMVG + OpenMVS 的3D重建平台 —— <strong><a href="https://github.com/PLUS-WAVE/WAVE-3D-Reconstruction" target="_blank" rel="noopener noreferrer">🌊WAVE-3D-Reconstruction</a></strong></p><h2 id="_1-ransac-筛选" tabindex="-1"><a class="header-anchor" href="#_1-ransac-筛选"><span>1 RANSAC 筛选</span></a></h2><h3 id="_1-1-大致原理" tabindex="-1"><a class="header-anchor" href="#_1-1-大致原理"><span>1.1 大致原理</span></a></h3><p><em>Random sample consensus</em> (RANSAC)，即随机抽样一致性，其是一种用于估计模型参数的迭代方法，特别适用于处理包含离群点（outliers）的数据集</p><p>RANSAC 的主要思想是随机采样数据点，用这些采样点拟合一个模型，然后计算其他数据点到这个模型的拟合误差；根据误差和阈值，将数据点分为<em>内点（inliers）<em>和</em>外点（outliers）</em>；重复这个过程多次，选择具有最多内点的模型作为最终的估计</p><p>大致步骤为：</p><ol><li><p><strong>随机采样</strong></p><p>从数据集中随机选择一小部分数据点，通常是与所估计模型参数数量相等的数据点</p></li><li><p><strong>模型拟合</strong></p><p>使用这些随机采样的数据点拟合一个模型，例如直线</p></li><li><p><strong>内点检测</strong></p><p>计算所有数据点到模型的拟合误差，并将与模型拟合误差小于某个阈值的数据点标记为内点</p></li><li><p><strong>判断是否满足条件</strong></p><p>如果内点的数量达到了某个设定的阈值，且模型参数的估计是合理的（例如，模型的拟合误差小于一定阈值），则认为找到了一个满足条件的模型</p></li><li><p><strong>重复迭代</strong></p><p>重复上述过程多次（通常几百甚至上千次），并且记录具有最多内点的模型，以及该模型估计的内点</p></li><li><p><strong>输出最佳模型</strong></p><p>在所有迭代中，选择具有最多内点的模型作为最终的估计模型。这些内点被认为是满足模型的数据点</p></li></ol><h3 id="_1-2-优缺点" tabindex="-1"><a class="header-anchor" href="#_1-2-优缺点"><span>1.2 优缺点</span></a></h3><p>RANSAC 的一个优点是它能够对模型参数进行鲁棒估计，能够在存在大量噪声的情况下找到合适的模</p><p>RANSAC 的缺点是计算这些参数所需的时间没有上限，其需要进行大量的随机采样和模型拟合，因此对于大规模数据集来说，计算复杂度较高，可能需要较长的时间来运行</p><h3 id="_1-3-实践效果" tabindex="-1"><a class="header-anchor" href="#_1-3-实践效果"><span>1.3 实践效果</span></a></h3><p>请见<a href="#1"> 3 实践操作 步骤二 </a></p><h2 id="_2-f矩阵" tabindex="-1"><a class="header-anchor" href="#_2-f矩阵"><span>2 F矩阵</span></a></h2><h3 id="_2-1-基本原理" tabindex="-1"><a class="header-anchor" href="#_2-1-基本原理"><span>2.1 基本原理</span></a></h3><p>基本矩阵（<em>Fundamental Matrix</em>）描述了两个摄像机之间的基本几何关系</p><p>在对极几何中，对于立体图像对中对应点的齐次图像坐标 <code>p1</code> 和 <code>p2</code>， <code>F*p1</code>描述了另一图像上的对应点 <code>p2</code> 必须位于其上的线（对极线）这意味着，对于所有对应点对都成立：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML" display="block"><semantics><mrow><msubsup><mi>p</mi><mn>2</mn><mi>T</mi></msubsup><mo>∗</mo><mi>F</mi><mo>∗</mo><msub><mi>p</mi><mn>1</mn></msub><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">p_2^T * F * p_1 = 0 </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1383em;vertical-align:-0.247em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8913em;"><span style="top:-2.453em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.13889em;">T</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.247em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord mathnormal" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">0</span></span></span></span></span></p><h3 id="_2-2-函数实现" tabindex="-1"><a class="header-anchor" href="#_2-2-函数实现"><span>2.2 函数实现</span></a></h3><p>在 OpenCV 中，提供了 <code>findFundamentalMat</code> 函数，用于估计两幅图像之间的F矩阵</p><p>以下是 <code>findFundamentalMat</code> 函数的基本用法：</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mat fundamental_matrix </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> findFundamentalMat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">points1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> points2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> mask</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> method</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ransacReprojThreshold</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> confidence</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中各参数的含义如下：</p><ul><li><code>points1</code> 和 <code>points2</code>：两幅图像中的匹配点坐标，通常是 <code>vector&lt;Point2f&gt;</code> 类型，表示两幅图像中匹配点的像素坐标</li><li><code>mask</code>：是一个输出数组通常是 <code>vector&lt;uchar&gt;</code> 类型，用于指示哪些匹配点被视为内点（<em>inliers</em>）和哪些被视为外点（<em>outliers</em>）</li><li><code>method</code>：用于指定计算基本矩阵的方法，可以是以下几种选项之一： <ul><li><code>cv::FM_RANSAC</code>：使用 RANSAC 算法进行估计，用于排除离群点</li><li><code>cv::FM_LMEDS</code>：使用最小中值误差估计方法</li><li><code>cv::FM_8POINT</code>：使用 8 点法估计基本矩阵</li></ul></li><li><code>ransacReprojThreshold</code>：RANSAC 算法中的重投影误差阈值，用于判断内点和外点，通常需要根据具体问题来选择适当的阈值，默认值为 3.0</li><li><code>confidence</code>：置信度，通常为默认值 0.99</li></ul><h2 id="_3-实践操作" tabindex="-1"><a class="header-anchor" href="#_3-实践操作"><span>3 实践操作</span></a></h2><p>之前通过<code>SIFT</code>+<code>Flann</code>+<code>ratio=0.7</code>的图像匹配和初步筛选，得到了 <code>good_matches</code>（<code>vector&lt;DMatch&gt;</code> 类型）</p><h4 id="步骤一-保存匹配点对坐标" tabindex="-1"><a class="header-anchor" href="#步骤一-保存匹配点对坐标"><span>步骤一：保存匹配点对坐标</span></a></h4><p>将 <code>vector&lt;DMatch&gt;</code> 类型的 <code>good_matches</code> 中的坐标信息提取出来存入 <code>vector&lt;Point2f&gt;</code> 类型的 <code>matchedPoints1/2</code> ；以便于后续的几何计算将匹配点对的坐标提取出来，以便于后续的几何计算</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 声明用于保存匹配点对的容器</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">vector</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Point2f</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> matchedPoints1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> matchedPoints2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> good_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    matchedPoints1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">push_back</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">keypoints1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">good_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">].</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">queryIdx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">].</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">    matchedPoints2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">push_back</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">keypoints2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">good_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">].</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">trainIdx</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">].</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">pt</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="步骤二-进行基本矩阵f的估计" tabindex="-1"><a class="header-anchor" href="#步骤二-进行基本矩阵f的估计"><span>步骤二：进行基本矩阵F的估计</span></a></h4><p>直接使用 <code>findFundamentalMat</code> 函数</p><p>这个函数在内部已经包含了 <strong>RANSAC</strong> 筛选步骤；具体来说，<code>findFundamentalMat</code> 函数会计算基本矩阵 F，同时使用 <strong>RANSAC</strong> 迭代方法来排除离群点，确保得到的基本矩阵对于图像匹配是稳健的</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 使用RANSAC进行基本矩阵F的估计</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mat F</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">vector</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">uchar</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> inliers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">F </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> findFundamentalMat</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">matchedPoints1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> matchedPoints2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> inliers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> RANSAC</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>为了查看 RANSAC 筛选的效果我们进行如下操作<a name="1"></a></p><p><code>inliers</code> 是一个二进制向量，指示哪些匹配点对被视为内点（符合基本矩阵约束），哪些被视为外点；我们接下来使用内点来进一步筛选匹配，只保留通过 RANSAC 筛选的匹配对在<code>ransac_filtered_matches</code>中，并打印出来</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 进一步筛选匹配</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">vector</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">DMatch</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ransac_filtered_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> inliers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">size</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    if</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">inliers</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">])</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    {</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">        ransac_filtered_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">push_back</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">good_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]);</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    }</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ransac_filtered_matches 包含了通过RANSAC筛选后的匹配对</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mat ransac_filtered_img_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">drawMatches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">img1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> keypoints1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> img2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> keypoints2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ransac_filtered_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ransac_filtered_img_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">imwrite</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">SAVE_PATH</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> ransac_filtered_img_matches</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th></th><th>匹配点数量</th><th>图像效果</th></tr></thead><tbody><tr><td>RANSAC 筛选前</td><td>2949</td><td><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-16/img_matches_3-4.jpg" alt="img_matches_3&amp;4" loading="lazy"></td></tr><tr><td>RANSAC 筛选后</td><td>2581</td><td><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-16/img_matches_3-4_.jpg" alt="img_matches_3&amp;4_" loading="lazy"></td></tr></tbody></table><p>可以明显看出，在 RANSAC 筛选后，消除了 <code>368</code> 对离群匹配，达到了非常好的匹配效果</p></li></ul>`,33)]))}const k=i(e,[["render",l]]),r=JSON.parse(`{"path":"/article/aljo8frg/","title":"OpenCV实现的F矩阵+RANSAC原理与实践","lang":"zh-CN","frontmatter":{"title":"OpenCV实现的F矩阵+RANSAC原理与实践","tags":["3DVision","OpenCV","SfM"],"createTime":"2023/09/20 16:30:25","permalink":"/article/aljo8frg/","description":"🌟后续的完成的项目：Windows 上基于 OpenMVG + OpenMVS 的3D重建平台 —— 🌊WAVE-3D-Reconstruction 1 RANSAC 筛选 1.1 大致原理 Random sample consensus (RANSAC)，即随机抽样一致性，其是一种用于估计模型参数的迭代方法，特别适用于处理包含离群点（outlie...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"OpenCV实现的F矩阵+RANSAC原理与实践\\",\\"image\\":[\\"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-16/img_matches_3-4.jpg\\",\\"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-16/img_matches_3-4_.jpg\\"],\\"dateModified\\":\\"2025-04-29T12:57:05.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/article/aljo8frg/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"OpenCV实现的F矩阵+RANSAC原理与实践"}],["meta",{"property":"og:description","content":"🌟后续的完成的项目：Windows 上基于 OpenMVG + OpenMVS 的3D重建平台 —— 🌊WAVE-3D-Reconstruction 1 RANSAC 筛选 1.1 大致原理 Random sample consensus (RANSAC)，即随机抽样一致性，其是一种用于估计模型参数的迭代方法，特别适用于处理包含离群点（outlie..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-16/img_matches_3-4.jpg"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-04-29T12:57:05.000Z"}],["meta",{"property":"article:tag","content":"SfM"}],["meta",{"property":"article:tag","content":"OpenCV"}],["meta",{"property":"article:tag","content":"3DVision"}],["meta",{"property":"article:modified_time","content":"2025-04-29T12:57:05.000Z"}]]},"readingTime":{"minutes":4.8,"words":1439},"git":{"updatedTime":1745931425000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":3,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"2. CV/10. OpenCV实现的F矩阵+RANSAC原理与实践.md","headers":[],"categoryList":[{"id":"de90e8","sort":2,"name":" CV"}]}`);export{k as comp,r as data};
