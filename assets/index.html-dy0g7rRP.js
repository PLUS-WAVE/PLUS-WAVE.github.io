import{_ as i,c as a,e as t,o as e}from"./app-CGJJd-cj.js";const n={};function l(h,s){return e(),a("div",null,s[0]||(s[0]=[t(`<h2 id="_3-1-类模板-函数模板" tabindex="-1"><a class="header-anchor" href="#_3-1-类模板-函数模板"><span>3.1 类模板/函数模板</span></a></h2><p>补充：只有模板的尖括号中&lt;&gt;，关键字 <code>typename</code> 和 <code>class</code> 是一样的</p><h2 id="_3-2-成员模板" tabindex="-1"><a class="header-anchor" href="#_3-2-成员模板"><span>3.2 成员模板</span></a></h2><p>它即是模板的一部分，自己又是模板，则称为成员模板</p><p>其经常用于构造函数</p><ol><li><em>ctor1</em> 这是默认构造函数的实现；它初始化 <code>first</code> 和 <code>second</code> 分别为 <u><code>T1</code> 和 <code>T2</code> 类型的默认构造函数</u>生成的默认值</li><li><em>ctor2</em> 这是带参数的构造函数的实现；它接受两个参数 <code>a</code> 和 <code>b</code>，并将它们分别用来初始化 <code>first</code> 和 <code>second</code> 成员变量</li><li><em>ctor3</em> 这是一个==<u>模板构造函数</u>==，接受一个<u>不同类型的 <code>pair</code> 对象作为参数</u>；它允许从一个不同类型的 <code>pair</code> 对象构造当前类型的 <code>pair</code> 对象，在构造过程中，它将源 <code>pair</code> 对象的 <code>first</code> 和 <code>second</code> 成员变量分别赋值给当前对象的成员变量，使其具有一定的灵活性和通用性</li></ol><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> pair</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	T1 first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">	T2 second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	pair</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">T1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">()),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">T2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">())</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //ctor1</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	pair</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T1</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T2</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> 	  //ctor2</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">		first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">b</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">	template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> U1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> U2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">		  //ctor3</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">	pair</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> pair</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">U1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> U2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> </span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">		first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">p</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">second</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {}</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>例一，可以使用 &lt;鲫鱼，麻雀&gt; 对象来构造一个 &lt;鱼类，鸟类&gt; 的pair</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-08-07/image-20230807152238567.png" alt="image-20230807152238567" style="zoom:67%;"></li><li><p>例二，父类指针是可以指向子类的，叫做 <em>up-cast</em>；智能指针也必须可以，所以其构造函数需要为==<u>模板构造函数</u>==</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-08-07/image-20230807152501305.png" alt="image-20230807152501305" style="zoom:67%;"></li></ul><h2 id="_3-3-模板模板参数" tabindex="-1"><a class="header-anchor" href="#_3-3-模板模板参数"><span>3.3 模板模板参数</span></a></h2><p><u>即模板中的一个模板参数也为模板</u>，下图黄色高亮部分</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-08-07/image-20230807161321152.png" alt="image-20230807161321152" style="zoom:67%;"><blockquote><ul><li><p><code>XCLs&lt;string, list&gt; mylist</code> 中即表示：容器 <em>list</em> 是 <em>string</em> 类型的—— 创建一个 <em>string</em> 的链表；<code>Container&lt;T&gt; c;</code> 即表示 <code>list&lt;srting&gt; c;</code></p></li><li><p>但是这样 <code>Container&lt;T&gt; c;</code> 语法过不了，容器 <em>list</em> 后面还有参数，需要用中间框和下面框下一行的代码 —— c++11的内容</p></li></ul></blockquote><blockquote><p>注：下面<u>不是</u>模板模板参数</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-08-07/image-20230807162712548.png" alt="image-20230807162712548" style="zoom:50%;"><p><code>class Sequence = deque&lt;T&gt;</code> 是有一个初始值，当没指定时就初始为 <code>deque&lt;T&gt;</code></p><p>在要指定时，如最后一行中的 <code>list&lt;int&gt;</code> 是确切的，不是模板</p></blockquote>`,13)]))}const k=i(n,[["render",l]]),r=JSON.parse(`{"path":"/cpp/58v5bzox/","title":"3 模板","lang":"zh-CN","frontmatter":{"title":"3 模板","createTime":"2023/08/10 17:48:37","permalink":"/cpp/58v5bzox/","description":"3.1 类模板/函数模板 补充：只有模板的尖括号中<>，关键字 typename 和 class 是一样的 3.2 成员模板 它即是模板的一部分，自己又是模板，则称为成员模板 其经常用于构造函数 ctor1 这是默认构造函数的实现；它初始化 first 和 second 分别为 T1 和 T2 类型的默认构造函数生成的默认值 ctor2 这是带参数的构...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"3 模板\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-23T12:28:40.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/cpp/58v5bzox/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"3 模板"}],["meta",{"property":"og:description","content":"3.1 类模板/函数模板 补充：只有模板的尖括号中<>，关键字 typename 和 class 是一样的 3.2 成员模板 它即是模板的一部分，自己又是模板，则称为成员模板 其经常用于构造函数 ctor1 这是默认构造函数的实现；它初始化 first 和 second 分别为 T1 和 T2 类型的默认构造函数生成的默认值 ctor2 这是带参数的构..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-23T12:28:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-23T12:28:40.000Z"}]]},"readingTime":{"minutes":2.03,"words":610},"git":{"updatedTime":1732364920000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":1,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/C++/2.面向对象高级开发 Part2/3. 3 模板.md","headers":[]}`);export{k as comp,r as data};
