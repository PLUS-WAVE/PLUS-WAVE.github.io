import{_ as s,c as a,e,o as n}from"./app-CGJJd-cj.js";const t={};function l(h,i){return n(),a("div",null,i[0]||(i[0]=[e(`<h2 id="_2-1-inline-函数" tabindex="-1"><a class="header-anchor" href="#_2-1-inline-函数"><span>2.1 inline 函数</span></a></h2><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/2023-07-13-20-04-44-image.png" style="zoom:70%;"><p>定义类的时候，<em>可以直接在body中定义函数（inline函数，在body中定义完成）</em>，也可以只是在body中声明函数</p><ul><li>inline内联函数：如果定义的函数是内联函数，那么会运行比较快，<mark>尽可能定义为内联函数</mark></li><li>在body外，<em>通过<code>inline</code>关键字来指定该函数为inline函数</em>。</li></ul><blockquote><p>注意的是，上面所有的inline函数，都只是我们指定的，希望它为inline，具体是不是，要看编译器来决定</p></blockquote><h2 id="_2-2-访问级别" tabindex="-1"><a class="header-anchor" href="#_2-2-访问级别"><span>2.2 访问级别</span></a></h2><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/2023-07-13-20-05-19-image.png" style="zoom:80%;"><ul><li><p><mark>数据应该被定义为private</mark></p></li><li><p>函数要被外界使用，定义为public；若只是内部处理，定义为private</p></li></ul><h2 id="_2-3-ctor-构造函数" tabindex="-1"><a class="header-anchor" href="#_2-3-ctor-构造函数"><span>2.3 ctor 构造函数</span></a></h2><h3 id="_2-3-1-ctor-的写法" tabindex="-1"><a class="header-anchor" href="#_2-3-1-ctor-的写法"><span>2.3.1 ctor 的写法</span></a></h3><p>方式一：（推荐）</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">T r </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> //函数名称与class的名称一致</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    : </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">re</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">),</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> im</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">        //中间这一行就是初始化</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>方式二：（不推荐）</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">complex</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> double</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  </span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    re </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> im </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">       //用赋值来进行初始化</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过构造函数来创建对象。会自动调用构造函数进行创建。</p><ul><li>构造函数名称需要与类的名称一样</li><li>函数的参数可以有默认参数</li><li>构造函数没有返回类型</li></ul><h3 id="_2-3-2-ctor-函数-重载" tabindex="-1"><a class="header-anchor" href="#_2-3-2-ctor-函数-重载"><span>2.3.2 ctor/函数 重载</span></a></h3><p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/202307160852248.png" alt="" loading="lazy"></p><p>构造函数可以有很多个，可以重载；但是上面的<code>1</code> <code>2</code>两个构造函数冲突了</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">complex</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> c2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">   // &quot;()&quot; 可以不要，一样的</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>上面的调用方式对两个构造函数都适用，冲突</p><hr><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> ()</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> return</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> re</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">double</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">  re </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> r</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">  }</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">  //不能有const</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>同名的函数可以有多个，编译器会编成不同的名称，实际调用哪个会根据哪个适用</li></ul><h3 id="_2-3-3-ctor-放在-private-区" tabindex="-1"><a class="header-anchor" href="#_2-3-3-ctor-放在-private-区"><span>2.3.3 ctor 放在 private 区</span></a></h3><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/202307160852097.png" style="zoom:80%;"><ul><li>通常构造函数不要放在private中，这样外界没法调用，也就无法创建对象</li><li>在设计模式 <code>Singleton</code>（单体）中，将构造函数放在了private中；这个class只有一份，外界想要调用的时候，只能使用定义的 <code>getinstance()</code> 函数来取得这一份；外界无法创建新的对象</li></ul><h2 id="_2-4-const-常量成员函数" tabindex="-1"><a class="header-anchor" href="#_2-4-const-常量成员函数"><span>2.4 const 常量成员函数</span></a></h2><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/202307160854481.png" style="zoom:80%;"><p><mark><strong>对于不会改变数据内容的函数，一定要加上const。</strong></mark></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">    const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> complex </span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;">2</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">real</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    cout </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;&lt;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> c1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">.</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">imag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>对于上面调用方式，我们<strong>创建一个常量</strong>复数然后<strong>调用函数</strong>输出实部虚部，如果上面real和imag函数定义的时候，没有加const，那么这里函数默认的意思是可能会改变数据，与我们的常量复数就矛盾了，<u>编译器会报错</u>；因此，对于不会改变数据内容的函数，一定一定要加const</p>`,33)]))}const k=s(t,[["render",l]]),r=JSON.parse(`{"path":"/cpp/q6mi9ib3/","title":"2 构造函数","lang":"zh-CN","frontmatter":{"title":"2 构造函数","permalink":"/cpp/q6mi9ib3/","createTime":"2023/07/17 16:32:12","description":"2.1 inline 函数 定义类的时候，可以直接在body中定义函数（inline函数，在body中定义完成），也可以只是在body中声明函数 inline内联函数：如果定义的函数是内联函数，那么会运行比较快，尽可能定义为内联函数 在body外，通过inline关键字来指定该函数为inline函数。 注意的是，上面所有的inline函数，都只是我们指...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2 构造函数\\",\\"image\\":[\\"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/202307160852248.png\\"],\\"dateModified\\":\\"2024-11-23T12:28:40.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/cpp/q6mi9ib3/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"2 构造函数"}],["meta",{"property":"og:description","content":"2.1 inline 函数 定义类的时候，可以直接在body中定义函数（inline函数，在body中定义完成），也可以只是在body中声明函数 inline内联函数：如果定义的函数是内联函数，那么会运行比较快，尽可能定义为内联函数 在body外，通过inline关键字来指定该函数为inline函数。 注意的是，上面所有的inline函数，都只是我们指..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/202307160852248.png"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-23T12:28:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-23T12:28:40.000Z"}]]},"readingTime":{"minutes":2.48,"words":745},"git":{"updatedTime":1732364920000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":1,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/C++/1.面向对象高级开发 Part1/2. 2 构造函数.md","headers":[]}`);export{k as comp,r as data};
