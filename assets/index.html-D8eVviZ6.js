import{_ as i,c as a,e as n,o as t}from"./app-CGJJd-cj.js";const e={};function l(p,s){return t(),a("div",null,s[0]||(s[0]=[n(`<h3 id="_5-1-迭代器的设计准则" tabindex="-1"><a class="header-anchor" href="#_5-1-迭代器的设计准则"><span>5.1 迭代器的设计准则</span></a></h3><p><mark>Iterator 必须提供5种 associated type</mark>（说明自己的特性的）来供算法来识别，以便算法正确地使用 Iterator</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Ref</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Ptr</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> __list_iterator</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> bidirectional_iterator_tag iterator_category</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // (1)迭代器类别：双向迭代器	</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T value_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // (2)迭代器所指对象的类型</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Ptr pointer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // (3)迭代器所指对象的指针类型</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> Ref reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // (4)迭代器所指对象的引用类型</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> ptrdiff_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> difference_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // (5)两个迭代器之间的距离类型</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // iter1-iter2 时，要保证数据类型以存储任何两个迭代器对象间的距离</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 迭代器回答</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// | Λ</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// | |</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// | | </span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// V |</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// 算法直接提问</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">typename</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">inline</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> void</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> algorithm</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">I</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> first</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> I</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> last</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">iterator_category</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">pointer</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">reference</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">value_type</span></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">    I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">difference_type</span></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">    ...</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但当 Iterator 并不是 class 时，例如指针本身，就不能 <code>typedef</code> 了 —— 这时就要设计一个 <em>Iterator Traits</em></p><p><strong>Traits</strong>：用于定义类型特征的信息，从而在编译时根据类型的不同进行不同的操作或处理 —— 类似一个萃取机（针对不同类型做不同操作：偏特化）</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-08-27/image-20230827102754004.png" alt="image-20230827102754004" style="zoom:80%;"><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// I是class iterator进</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Iterator_traits</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> typename</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">iterator_category</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> iterator_category</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> typename</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">value_type</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> value_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> typename</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">difference_type</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> difference_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> typename</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">pointer</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pointer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> typename</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> I</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">::</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">reference</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // typename用于告诉编译器，接下来的标识符是一个类型名，而不是一个变量名或其他名称</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // I::iterator_category 是一个类型名</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // iterator_category是这个迭代器类型内部的一个嵌套类型（typedef ...）</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// I是指向T的指针进</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Iterator_traits</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;">T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> random_access_iterator_tag iterator_category</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T value_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> ptrdiff_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> difference_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pointer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// I是指向T的常量指针进</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">template</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> &lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">class</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> Iterator_traits</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&lt;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">const</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> random_access_iterator_tag iterator_category</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T value_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 注意是T而不是const T</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 按理说是const T，但声明一个不能被赋值的变量无用</span></span>
<span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">    // 所以value_type不应加上const</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> ptrdiff_t</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> difference_type</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> pointer</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	typedef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> const</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> T</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&amp;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> reference</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>除了 Iterator Traits，还有很多其他 Traits</p></blockquote><h3 id="_5-2-迭代器的分类" tabindex="-1"><a class="header-anchor" href="#_5-2-迭代器的分类"><span>5.2 迭代器的分类</span></a></h3><p>迭代器的分类对算法的效率有很大的影响</p><ol><li>输入迭代器 <em>input_iterator_tag</em>：istream迭代器</li><li>输出迭代器 <em>output_iterator_tag</em>：ostream迭代器</li><li>单向迭代器 <em>forward_iterator_tag</em>：forward_list，hash类容器</li><li>双向迭代器 <em>bidirectional_iterator_tag</em>： list、红黑树容器</li><li>随机存取迭代器 <em>random_access_iterator_tag</em>：array、vector、deque</li></ol><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-08-31/image-20230831085955167.png" alt="image-20230831085955167" style="zoom:67%;"><blockquote><p>用有继承关系的class实现：</p><ol><li>方便迭代器类型<u>作为参数进行传递</u>，如果是整数的是不方便的</li><li>有些算法的实现没有实现所有类型的迭代器类别，就要用继承关系<u>去找父迭代器类别</u></li></ol></blockquote><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> input_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> output_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> forward_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> input_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> bidirectional_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> forward_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">struct</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> random_access_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> :</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> public</span><span style="--shiki-light:#2E8F82;--shiki-dark:#5DA994;"> bidirectional_iterator_tag</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>算法 <em>distance</em> 将会按照迭代器的类别进行不同的操作以提升效率</p><ul><li>如果迭代器可以跳，直接 <code>last - first</code> 即可</li><li>如果迭代器不能跳，就只能一步一步走来计数</li></ul><p>两者的效率差别很大</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-02/image-20230902091354849.png" alt="image-20230902091354849" style="zoom:67%;"><blockquote><p>但如果迭代器类别是 <code>farward_iterator_tag</code> 或者 <code>bidirectional_iterator_tag</code>，该算法没有针对这种类型迭代器实现，就可以用<strong>继承关系</strong>来使用父类的实现（继承关系——<em>“is a”</em> 子类是一种父类，当然可以用父类的实现）</p></blockquote><p>算法 <em>copy</em> 将经过很多判断筛选来<u>找到最高效率</u>的实现</p><p>其中用到了 <em>Iterator Traits</em> 和 <em>Type Traits</em> 来进行筛选</p><blockquote><p><em>has trivial op=()</em> 是指的有不重要的拷贝赋值函数（例如复数用的自带的拷贝赋值函数）</p></blockquote><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-02/image-20230902093014515.png" alt="image-20230902093014515" style="zoom:67%;"><blockquote><p>注意：由于 <em>output_iterator_tag</em>（例如 <em>ostream_iterator</em>）是 <strong>write-only</strong>，无法用 <code>*</code> 来读取内容，所以在设计时就需要再写个专属版本</p></blockquote><p>在源码中，算法都是模板函数，接受所有的 iterator，但一些算法只能用特定的 iterator，所以其会在<u>模板参数的名称</u>上进行暗示：</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2023-09-02/image-20230902094911956.png" style="zoom:67%;">`,26)]))}const k=i(e,[["render",l]]),r=JSON.parse(`{"path":"/cpp/osv1qqoq/","title":"5 迭代器","lang":"zh-CN","frontmatter":{"title":"5 迭代器","createTime":"2023/10/01 20:19:48","permalink":"/cpp/osv1qqoq/","description":"5.1 迭代器的设计准则 Iterator 必须提供5种 associated type（说明自己的特性的）来供算法来识别，以便算法正确地使用 Iterator 但当 Iterator 并不是 class 时，例如指针本身，就不能 typedef 了 —— 这时就要设计一个 Iterator Traits Traits：用于定义类型特征的信息，从而在编...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5 迭代器\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-23T12:28:40.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/cpp/osv1qqoq/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"5 迭代器"}],["meta",{"property":"og:description","content":"5.1 迭代器的设计准则 Iterator 必须提供5种 associated type（说明自己的特性的）来供算法来识别，以便算法正确地使用 Iterator 但当 Iterator 并不是 class 时，例如指针本身，就不能 typedef 了 —— 这时就要设计一个 Iterator Traits Traits：用于定义类型特征的信息，从而在编..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-23T12:28:40.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-23T12:28:40.000Z"}]]},"readingTime":{"minutes":3.56,"words":1068},"git":{"updatedTime":1732364920000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":1,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/C++/3. STL & 泛式编程/2023-10-01- 5 迭代器.md","headers":[]}`);export{k as comp,r as data};
