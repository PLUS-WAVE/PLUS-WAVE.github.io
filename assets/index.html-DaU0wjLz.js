import{_ as s,c as e,e as a,o as n}from"./app-CGJJd-cj.js";const l={};function t(h,i){return n(),e("div",null,i[0]||(i[0]=[a(`<p>弹簧-质量-阻尼系统模拟摆动的绳子和布料的物理行为</p><p>源码见GitHub：<a href="https://github.com/PLUS-WAVE/A-UESTCer-s-Code/tree/master/B.%E5%A4%A7%E4%BA%8C%E4%B8%8B/%E5%9B%BE%E5%BD%A2%E4%B8%8E%E5%8A%A8%E7%94%BB%E2%85%A1/%E5%AE%9E%E9%AA%8C4/src" target="_blank" rel="noopener noreferrer">A-UESTCer-s-Code</a></p><h2 id="_1-实现效果" tabindex="-1"><a class="header-anchor" href="#_1-实现效果"><span>1 实现效果</span></a></h2><p>二维的弹性物体最终实现的效果如下：</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-09-03/recording-1716622747376-2.gif" alt="recording" style="zoom:67%;"><h2 id="_2-实现过程" tabindex="-1"><a class="header-anchor" href="#_2-实现过程"><span>2 实现过程</span></a></h2><h3 id="_2-1-一维弹性物体模拟" tabindex="-1"><a class="header-anchor" href="#_2-1-一维弹性物体模拟"><span>2.1 一维弹性物体模拟</span></a></h3><h4 id="_2-1-1-质点类-mass" tabindex="-1"><a class="header-anchor" href="#_2-1-1-质点类-mass"><span>2.1.1 质点类（Mass）</span></a></h4><p>质点类（<code>Mass</code>）是用于表示弹性物体中的单个质点的关键组件之一。在这个类中，我们记录了质点的基本信息，包括质量、位置、速度和受力。下面是对质点类中关键成员和方法的说明：</p><ul><li><code>float m</code>: 质点的质量。质量决定了质点对外力的响应程度。</li><li><code>Vector3D pos</code>: 质点在空间中的位置。位置向量用来描述质点的位置。</li><li><code>Vector3D vel</code>: 质点的速度。速度向量表示质点在各个方向上的运动速度。</li><li><code>Vector3D force</code>: 质点所受的外力。在每个时间步长内，质点可能受到多个外力的作用，这些外力的向量和即为质点所受的总外力。</li></ul><p>以下是质点类中的关键方法：</p><ul><li><code>applyForce(Vector3D force)</code>：用于将外力应用于质点上。在一段时间内，可能会有多个外部力作用于质点上，因此我们将这些外力向量相加，得到质点所受的总外力。</li><li><code>init()</code>：初始化方法，将质点的外力值设为零。在每个时间步长开始时，我们需要将质点的外力重置为零，以便计算新的外力。</li><li><code>simulate(float dt)</code>：模拟方法，根据质点所受的外力和牛顿运动定律，计算质点在时间步长 <code>dt</code> 内的新位置和新速度。这里采用了欧拉方法（Euler Method）进行数值积分，它虽然简单但通常足够用于大多数物理模拟。</li></ul><p>质点类是模拟弹性物体运动过程中的基础，通过不断更新质点的状态，我们可以模拟出弹性物体在外力作用下的运动行为。</p><h4 id="_2-1-2-弹簧类-spring" tabindex="-1"><a class="header-anchor" href="#_2-1-2-弹簧类-spring"><span>2.1.2 弹簧类（Spring）</span></a></h4><p>弹簧类（Spring）是用于模拟弹簧连接的两个质点之间的作用力的关键组件。在这个类中，我们记录了弹簧的基本信息，包括连接的两个质点、弹簧的刚度和长度，以及内部阻尼的影响。下面是对弹簧类中关键成员和方法的说明：</p><ul><li><code>Mass* mass1</code>， <code>Mass* mass2</code>: 弹簧连接的两个质点。这两个质点受到弹簧作用的力，质点运动受到弹簧力的影响。</li><li><code>float springConstant</code>: 弹簧的刚度常数。它决定了弹簧对质点施加的力的大小。</li><li><code>float springLength</code>: 弹簧的静止长度。当两个质点的距离等于静止长度时，弹簧不会施加力。</li><li><code>float frictionConstant</code>: 弹簧的内部阻尼系数。它描述了弹簧内部摩擦的程度。</li></ul><p>以下是弹簧类中的关键方法：</p><p><code>solve()</code>: 解决方法，用于计算弹簧连接的两个质点受到的合力。</p><ol><li><p>首先计算两个质点之间的距离，并根据距离计算弹簧的伸长量。</p><p><code>float r = springVector.length();</code></p></li><li><p>然后根据伸长量和弹簧的刚度常数计算弹簧对质点施加的力。</p><ul><li><code>e = springVector / r;</code>：计算弹簧的单位方向向量。<code>springVector</code> 是弹簧两端质点之间的位移向量，通过除以该向量的长度 <code>r</code>，可以得到单位方向向量 <code>e</code>。</li><li><code>force += e * (r - springLength) * (-springConstant);</code>：计算弹簧的弹性力。根据胡克定律，弹簧的弹性力与弹簧的伸长量成正比，方向与弹簧的单位方向向量相同。<code>r - springLength</code> 表示当前弹簧的伸长量，乘以弹簧的弹性常数 <code>springConstant</code>，即可得到弹簧的弹性力大小。</li><li><code>force += -e * (mass1-&gt;vel*e - mass2-&gt;vel*e) * frictionConstant;</code>：计算弹簧的摩擦力。摩擦力与两个质点之间的相对速度以及弹簧的内摩擦常数成正比。<code>(mass1-&gt;vel*e - mass2-&gt;vel*e)</code> 计算了两个质点之间的相对速度在弹簧方向上的分量，然后乘以内摩擦常数 <code>frictionConstant</code>，即可得到摩擦力的大小。</li></ul></li><li><p>最后，将弹簧力施加到两个质点上，以更新它们的受力状态。</p></li></ol><p>弹簧类是模拟弹性物体运动过程中的关键组件之一，通过模拟弹簧连接的两个质点之间的作用力，我们可以模拟出弹簧在外力作用下的伸缩变形情况，从而实现对弹性物体的模拟。</p><h4 id="_2-1-3-模拟类-ropesimulation" tabindex="-1"><a class="header-anchor" href="#_2-1-3-模拟类-ropesimulation"><span>2.1.3 模拟类（RopeSimulation）</span></a></h4><p>模拟类是整个模拟系统的核心，负责协调质点和弹簧之间的相互作用，并模拟一维弹性物体的运动过程。在模拟类中，我们创建了弹簧数组，并初始化了所有的弹簧。然后，在每个时间步长内，我们通过迭代计算所有弹簧的受力情况，并更新所有质点的位置和速度。下面是对弹簧类中关键成员和方法的说明：</p><ul><li><p><code>Spring** springs;</code>：弹簧数组，用于存储所有弹簧对象的指针。</p></li><li><p><code>Vector3D gravitation;</code>：表示重力加速度的向量，将作用于所有质点。</p></li><li><p><code>Vector3D ropeConnectionPos;</code>：绳索连接点的位置向量，用于指定系统中第一个质点的位置。</p></li><li><p><code>Vector3D ropeConnectionVel;</code>：绳索连接点的速度向量，用于移动绳索连接点。</p></li></ul><p>以下是弹簧类中的关键方法：</p><ul><li><p><code>RopeSimulation(...)</code> 构造函数：初始化模拟对象。在此构造函数中，我们设置了质点的初始位置，创建了弹簧对象，并将其连接到相应的质点上。</p></li><li><p><code>release()</code> 方法：释放内存，用于删除所有的弹簧对象。</p></li><li><p><code>solve()</code> 方法：计算系统中所有弹簧的受力情况，包括弹簧的弹性力和重力。然后将这些力应用于相应的质点上。</p></li><li><p><code>simulate(float dt)</code> 方法：模拟系统的运动过程。在每个时间步长内，首先调用基类的 <code>simulate()</code> 方法更新所有质点的位置和速度。然后更新绳索连接点的位置。</p></li><li><p><code>setRopeConnectionVel(Vector3D ropeConnectionVel)</code> 方法：设置绳索连接点的速度，用于移动绳索连接点。</p></li></ul><p>通过这些方法，模拟类 <code>RopeSimulation</code> 能够模拟一维弹性物体的运动过程，并在其中考虑了重力、弹簧力以及绳索连接点的运动。</p><h4 id="_2-1-4-opengl实现" tabindex="-1"><a class="header-anchor" href="#_2-1-4-opengl实现"><span>2.1.4 openGL实现</span></a></h4><p>实现了一个基于OpenGL的绳索模拟系统，其中使用了一些物理引擎的概念，如质点、弹簧和重力。</p><ul><li><code>RopeSimulation* ropeSimulation = new RopeSimulation(...);</code>：创建了一个绳索模拟对象，设置了模拟所需的参数，如质点数量、质点重量、弹簧常数、弹簧长度等。</li><li><code>void renderScene(void)</code>：渲染函数，绘制绳索模拟系统的图像，包括绳索的线条表示。 <ol><li>首先，它设置了视图矩阵和模型矩阵，然后清除颜色缓冲区和深度缓冲区。</li><li>接着，调用了 <code>Update()</code> 函数更新模拟系统的状态。</li><li>最后，通过OpenGL的绘图函数 <code>glBegin()</code> 和 <code>glEnd()</code> 绘制了绳索的形状，以线段的形式连接相邻的质点。绘制完成后，刷新绘图管线并交换缓冲区，使绘制结果显示在屏幕上。</li></ol></li></ul><p>这段代码通过OpenGL实现了一个基本的绳索模拟系统，并提供了键盘控制功能，用户可以通过键盘输入控制绳索的运动方向和停止模拟等。</p><p>实现效果如下：</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-09-03/recording-123.gif" alt="recording" style="zoom:67%;"><h3 id="_2-2-二维弹性物体模拟" tabindex="-1"><a class="header-anchor" href="#_2-2-二维弹性物体模拟"><span>2.2 二维弹性物体模拟</span></a></h3><p>接下来我们要实现一个二维的弹性物体——布料，其就是将之前实现的弹性绳子交叉纵横编织成一个网。</p><h4 id="_2-2-1-模拟类改进" tabindex="-1"><a class="header-anchor" href="#_2-2-1-模拟类改进"><span>2.2.1 模拟类改进</span></a></h4><h5 id="_1-simulation1-类" tabindex="-1"><a class="header-anchor" href="#_1-simulation1-类"><span>(1) Simulation1 类</span></a></h5><p><code>Simulation1</code> 类在 <code>Simulation</code> 类的基础上进行了扩展，以支持二维的弹性物体模拟，而不仅仅是一维的质点链。以下是主要的改进：</p><ol><li><p><strong>二维质点数组</strong>：在 <code>Simulation</code> 类中，质点存储在一个一维数组中。在 <code>Simulation1</code> 类中，质点存储在一个二维数组中，这使得可以模拟一个二维的弹性物体，如布料。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mass</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">***</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> masses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // In Simulation1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mass</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">**</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> masses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // In Simulation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>构造函数</strong>：<code>Simulation1</code> 的构造函数接受两个参数，分别表示二维物体的行数和列数，而 <code>Simulation</code> 的构造函数只接受一个参数，表示一维质点链的长度。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Simulation1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> numOfMassX</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> numOfMassY</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> float</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // In Simulation1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">Simulation</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> numOfMasses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> float</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> m</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // In Simulation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>获取质点的方法</strong>：<code>Simulation1</code> 类提供了一个新的 <code>getMass(int x, int y)</code> 方法，可以获取二维数组中的任何一个质点。而 <code>Simulation</code> 类只提供了一个 <code>getMass(int index)</code> 方法，只能获取一维数组中的质点。</p><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mass</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> getMass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> x</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;"> int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> y</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> In Simulation1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">Mass</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">*</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> getMass</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">(</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> index</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> //</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> In Simulation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><strong>初始化和模拟方法</strong>：<code>Simulation1</code> 类的 <code>init()</code> 和 <code>simulate(float dt)</code> 方法都使用了两层循环，以处理二维数组中的所有质点。而 <code>Simulation</code> 类的这两个方法只使用了一层循环，只处理一维数组中的质点。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> i </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> row</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">	for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> j </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> col</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">		masses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">i</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">][</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">j</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // In Simulation1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> (</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">int</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 0</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> a </span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&lt;</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;"> numOfMasses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> ++</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>
<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">	masses</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">[</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">a</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">]-&gt;</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">();</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // In Simulation</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p><code>Simulation1</code> 类在 <code>Simulation</code> 类的基础上进行了扩展，以支持二维的弹性物体模拟。</p><h5 id="_2-clothsimulation-类" tabindex="-1"><a class="header-anchor" href="#_2-clothsimulation-类"><span>(2) ClothSimulation 类</span></a></h5><p><code>ClothSimulation</code>类在<code>RopeSimulation</code>类的基础上进行了一些改动以模拟布料的物理行为。以下是一些主要的改动：</p><ol><li><code>ClothSimulation</code>类引入了<code>Xlen</code>和<code>Ylen</code>两个变量，它们分别表示布料在X轴和Y轴方向上的质点数量。这与<code>RopeSimulation</code>类不同，后者只需要一个质点数组来模拟一维的绳索。</li><li><code>ClothSimulation</code>类的构造函数接受两个额外的参数<code>numOfMassesX</code>和<code>numOfMassesY</code>，它们分别表示布料在X轴和Y轴方向上的质点数量。这与<code>RopeSimulation</code>类的构造函数不同，后者只需要一个参数来表示质点的数量。</li><li><code>ClothSimulation</code>类的<code>springs</code>变量是一个四维数组，用于存储布料中的弹簧。每个弹簧都连接着两个相邻的质点。这与<code>RopeSimulation</code>类不同，后者的<code>springs</code>变量是一个二维数组，只需要存储绳索中的弹簧。</li><li><code>ClothSimulation</code>类的<code>simulate</code>方法更新了<strong>四个角的质点位置</strong>（固定了四个角）和速度，以模拟布料的运动。这与<code>RopeSimulation</code>类的<code>simulate</code>方法不同，后者只更新了第一个质点的位置和速度。</li></ol><h4 id="_2-2-2-opengl-渲染" tabindex="-1"><a class="header-anchor" href="#_2-2-2-opengl-渲染"><span>2.2.2 openGL 渲染</span></a></h4><p><code>renderScene()</code> 主要思想是遍历布料模拟中的所有质点，并绘制连接这些质点的弹簧。弹簧的颜色和宽度由其张力决定。</p><ol><li><p>通过两层循环遍历所有质点。每个质点都与其右侧和下方的质点相连，形成一个弹簧。</p><p><code>if (i &lt; clothSimulation-&gt;Xlen - 2)</code> 和 <code>if (j &lt; clothSimulation-&gt;Ylen - 2)</code> 这两个条件判断确保了不会尝试访问超出数组范围的质点。</p></li><li><p>对于每个弹簧，计算其两端质点的距离，以此计算张力。</p></li><li><p><strong>根据张力计算颜色强度</strong>，张力越大，颜色强度越小。</p></li><li><p>使用OpenGL的函数设置线段的颜色和宽度，然后绘制线段。</p></li></ol><p>这样，就可以在屏幕上绘制出一个由弹簧组成的网格，模拟布料的效果。</p><h4 id="_2-2-3-鼠标互动" tabindex="-1"><a class="header-anchor" href="#_2-2-3-鼠标互动"><span>2.2.3 鼠标互动</span></a></h4><p><code>mouse()</code> 和 <code>motion()</code> 主要处理鼠标的点击和移动事件，以便在布料模拟中选择和移动质点。</p><ol><li><code>mouse</code> 函数处理鼠标点击事件。当左键被按下时，它会记录鼠标的状态和位置，并将鼠标的屏幕坐标转换为模拟空间的坐标。然后，它会遍历所有的质点，找到距离鼠标位置最近的质点，并记录其位置。当左键被释放时，它会重置鼠标的状态。</li><li><code>motion</code> 函数处理鼠标移动事件。当左键被按下时，它会将鼠标的屏幕坐标转换为模拟空间的坐标，并计算出鼠标移动的距离。然后，它会更新被选中质点的位置，使其沿着鼠标移动的方向移动。最后，它会更新鼠标的位置。</li></ol><p>这样就可以通过鼠标操作来选择和移动布料模拟中的质点，从而直观地观察和控制布料的运动。</p><h4 id="_2-2-4-最终实现" tabindex="-1"><a class="header-anchor" href="#_2-2-4-最终实现"><span>2.2.4 最终实现</span></a></h4><p>最终实现的效果如下：</p><img src="https://raw.githubusercontent.com/PLUS-WAVE/blog-image/master/img/blog/2024-09-03/recording-1716622747376-2.gif" alt="recording" style="zoom:67%;">`,53)]))}const d=s(l,[["render",t]]),o=JSON.parse(`{"path":"/opengl/pjr01n34/","title":"4 OpenGL 弹性物体模拟","lang":"zh-CN","frontmatter":{"title":"4 OpenGL 弹性物体模拟","createTime":"2024/09/03 09:34:32","permalink":"/opengl/pjr01n34/","description":"弹簧-质量-阻尼系统模拟摆动的绳子和布料的物理行为 源码见GitHub：A-UESTCer-s-Code 1 实现效果 二维的弹性物体最终实现的效果如下： recording 2 实现过程 2.1 一维弹性物体模拟 2.1.1 质点类（Mass） 质点类（Mass）是用于表示弹性物体中的单个质点的关键组件之一。在这个类中，我们记录了质点的基本信息，包括...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"4 OpenGL 弹性物体模拟\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-06T08:10:34.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/opengl/pjr01n34/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"4 OpenGL 弹性物体模拟"}],["meta",{"property":"og:description","content":"弹簧-质量-阻尼系统模拟摆动的绳子和布料的物理行为 源码见GitHub：A-UESTCer-s-Code 1 实现效果 二维的弹性物体最终实现的效果如下： recording 2 实现过程 2.1 一维弹性物体模拟 2.1.1 质点类（Mass） 质点类（Mass）是用于表示弹性物体中的单个质点的关键组件之一。在这个类中，我们记录了质点的基本信息，包括..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T08:10:34.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T08:10:34.000Z"}]]},"readingTime":{"minutes":10.84,"words":3252},"git":{"updatedTime":1746519034000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":3,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/OpenGL/OpenGL/4. OpenGL 弹性物体模拟.md","headers":[]}`);export{d as comp,o as data};
