import{_ as s,c as e,e as a,o as l}from"./app-CGJJd-cj.js";const t={};function h(n,i){return l(),e("div",null,i[0]||(i[0]=[a('<h2 id="_2-7-1-垃圾进程" tabindex="-1"><a class="header-anchor" href="#_2-7-1-垃圾进程"><span>2.7.1 垃圾进程</span></a></h2><p><a href="https://blog.csdn.net/qq_43619271/article/details/138166254" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/qq_43619271/article/details/138166254</a></p><p><a href="https://zhuanlan.zhihu.com/p/506686899" target="_blank" rel="noopener noreferrer">https://zhuanlan.zhihu.com/p/506686899</a></p><p><strong>解决方法零</strong></p><p>Kill Process 后依然占用显存并显示 No Such Process</p><p>查找僵尸进程：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> aux</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Z</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> # 僵尸进程（状态为 `Z` 或 `Zl`）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ol><li><p>确认僵尸进程的父进程</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">僵尸进程PI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li><li><p>终止父进程：找到父进程后，终止它：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">kill</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -9</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">父进程PI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><hr><p><strong>解决方法一</strong></p><ol><li><p>使用 <code>fuser</code> 查找占用显卡资源的进程</p><ul><li><p>命令可以查看哪些进程正在使用 GPU 设备。命令如下：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">fuser</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> /dev/nvidia</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;">*</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这会列出所有正在占用显卡资源的进程及其相关信息。</p></li></ul></li><li><p><strong>确认占用 GPU 的进程</strong></p><ul><li><p>查找进程信息：通过 <code>fuser</code> 找到进程号（PID）后，可以使用以下命令查看进程的详细信息：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -ef</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">PI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>这样可以确认是否是想要的程序</p></li></ul></li><li><p><strong>强制终止进程</strong></p><ul><li><p>如果确认进程是相关程序，强制终止进程：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">kill</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -9</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">PI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ul></li></ol><p><strong>解决方法二</strong></p><p>所以如果知道 No Such Process 对应的 command 中有什么独特的字段的话，比如 No Such Process 原本的 command 中，有一段独有的字段 <code>mixed</code>，那么就可以通过指令</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> aux</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> mixed</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -v</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> grep</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{print $2}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> xargs</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> kill</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>借助这个 command，可以终止所有与“mixed”相关的进程</p><ol><li><strong><code>ps aux</code></strong>: <ul><li><code>ps</code> 命令用于列出当前系统上所有的进程。<code>aux</code> 是选项，表示： <ul><li><code>a</code>: 显示所有用户的进程，不仅仅是当前用户的进程（最好不加）</li><li><code>u</code>: 以用户为中心显示进程</li><li><code>x</code>: 显示没有控制终端的进程</li></ul></li></ul></li><li><strong><code>grep mixed</code></strong>: <ul><li><code>grep</code> 是用来过滤文本内容的命令。这里它的作用是查找包含 &quot;mixed&quot; 字符串的进程信息</li></ul></li><li><strong><code>grep -v grep</code></strong>: <ul><li><code>grep -v grep</code> 这个部分是排除掉包含“grep”字符串的行。因为上一条命令中也会出现包含“grep mixed”的进程，这会导致我们匹配到自己当前执行的 <code>grep</code> 命令，所以用 <code>-v</code> 来排除掉这一行</li></ul></li><li><strong><code>awk &#39;{print $2}&#39;</code></strong>: <ul><li><code>awk</code> 是一个文本处理工具，<code>&#39;{print $2}&#39;</code> 表示输出每一行的第二列，这一列通常是进程的 PID</li></ul></li><li><strong><code>xargs kill</code></strong>: <ul><li><code>xargs</code> 会将从前面命令传递过来的 PID 列表作为参数传递给 <code>kill</code> 命令</li><li><code>kill</code> 命令根据传入的 PID 来终止对应的进程</li></ul></li></ol><p><strong>特殊：</strong></p><p>查看僵尸进程的父进程 ID（PPID）：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> &lt;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">僵尸进程PI</span><span style="--shiki-light:#393A34;--shiki-dark:#DBD7CAEE;">D</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>如果 PPID 是 <code>1</code>（<code>init</code> 或 <code>systemd</code>），说明父进程是系统级别的进程</li><li>如果 PPID 不存在，说明父进程已经退出</li></ul><p>如果父进程是 <code>init</code> 或 <code>systemd</code>，通常系统会自动回收这些僵尸进程。如果它们仍然存在，可以尝试以下方法：</p><ol><li><p><strong>重启系统</strong>：重启系统是最简单的方法，可以彻底清理所有僵尸进程</p></li><li><p><strong>手动触发系统回收</strong>：如果不想重启系统，可以尝试重新启动 <code>systemd</code> 或 <code>init</code>：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">sudo</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> systemctl</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> daemon-reload</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div></li></ol><p><strong>批量清理僵尸进程</strong></p><p>如果有多个僵尸进程，可以编写一个简单的脚本来批量清理它们：</p><div class="language-bash line-numbers-mode" data-highlighter="shiki" data-ext="bash" style="--shiki-light:#393a34;--shiki-dark:#dbd7caee;--shiki-light-bg:#ffffff;--shiki-dark-bg:#121212;"><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">for</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> pid</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> in</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> $(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> aux</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> grep</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Z</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;"> |</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;"> awk</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &#39;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">{print $2}</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&#39;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">);</span><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;"> do</span></span>\n<span class="line"><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;">  ppid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">=$(</span><span style="--shiki-light:#59873A;--shiki-dark:#80A665;">ps</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -o</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;"> ppid=</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -p</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $pid</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">)</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  echo</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Killing parent process $ppid of zombie process $pid</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>\n<span class="line"><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">  kill</span><span style="--shiki-light:#A65E2B;--shiki-dark:#C99076;"> -9</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> $ppid</span></span>\n<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">done</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个脚本会找到所有僵尸进程并终止它们的父进程。（但是如果父进程是 <code>1</code> 就不行）</p>',26)]))}const p=s(t,[["render",h]]),k=JSON.parse(`{"path":"/experience/r4rnh4rj/","title":"2.7 进程","lang":"zh-CN","frontmatter":{"title":"2.7 进程","createTime":"2025/05/06 17:08:52","permalink":"/experience/r4rnh4rj/","description":"2.7.1 垃圾进程 https://blog.csdn.net/qq_43619271/article/details/138166254 https://zhuanlan.zhihu.com/p/506686899 解决方法零 Kill Process 后依然占用显存并显示 No Such Process 查找僵尸进程： 确认僵尸进程的父进程 终止...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.7 进程\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-05-06T09:10:05.000Z\\",\\"author\\":[]}"],["meta",{"property":"og:url","content":"https://plus-wave.github.io/experience/r4rnh4rj/"}],["meta",{"property":"og:site_name","content":"PLUS-WAVE's Blog"}],["meta",{"property":"og:title","content":"2.7 进程"}],["meta",{"property":"og:description","content":"2.7.1 垃圾进程 https://blog.csdn.net/qq_43619271/article/details/138166254 https://zhuanlan.zhihu.com/p/506686899 解决方法零 Kill Process 后依然占用显存并显示 No Such Process 查找僵尸进程： 确认僵尸进程的父进程 终止..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-06T09:10:05.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-06T09:10:05.000Z"}]]},"readingTime":{"minutes":2.93,"words":879},"git":{"updatedTime":1746522605000,"contributors":[{"name":"PLUS_WAVE","username":"","email":"wangplus_wave@foxmail.com","commits":1,"avatar":"https://gravatar.com/avatar/73d9cce6b7473bc4e3bccd9c674dc373250f563551d205366d1b3852d719f74e?d=retro"}]},"autoDesc":true,"filePathRelative":"notes/Experience/2. Linux&Server/2.7 进程.md","headers":[]}`);export{p as comp,k as data};
